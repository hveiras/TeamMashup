using Microsoft.Web.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Resources;
using System.Web.Mvc;
using TeamMashup.Core.Contracts;
using TeamMashup.Core.Domain;
using TeamMashup.Core.I18n;
using TeamMashup.Core.Security;
using TeamMashup.Membership;
using TeamMashup.Models;
using TeamMashup.Models.Admin;
using TeamMashup.Server.Filters;
using TeamMashup.Server.Models;

namespace TeamMashup.Server.Areas.Admin.Controllers
{
    [NoCache]
    public class UserController : TenantBaseController
    {
        public ActionResult Index()
        {
            return View();
        }

        [ChildActionOnly]
        public ActionResult AddUserInline()
        {
            return PartialView("_AddUserInline");
        }

        [HttpPost]
        public ActionResult AddUserInline(UserModel model)
        {
            if (ModelState.IsValid)
            {
                var subscription = Context.Database.Subscriptions.GetById(WebSecurity.CurrentUserSubscriptionId);
                var email = string.Format("{0}@{1}", model.UserName, subscription.EmailDomain);

                User existingUser;
                if (Context.Users.TryGetByEmail(email, out existingUser))
                {
                    ModelState.AddModelError("username", "There is already and user with the name you entered, please choose a different one.");
                    return PartialView("_AddUserInline", model);
                }

                var user = new User
                {
                    SubscriptionId = subscription.Id,
                    Name = model.Name,
                    Email = email,
                    Password = SecurityManager.Hash("123") //TODO: replace this for an autogenerated password.
                };

                Context.Database.Users.Add(user);

                //TODO: send activation email.
            }

            return PartialView("_AddUserInline", model);
        }

        public ActionResult GetUserItems(int iDisplayStart, int iDisplayLength, string sEcho)
        {
            var query = Context.Users.NonDeleted().OrderByDescending(x => x.CreatedDate);

            var totalRecords = query.Count();

            var page = query.Skip(iDisplayStart).Take(iDisplayLength).ToList();

            var model = new DataTablePage
            {
                sEcho = sEcho,
                iTotalRecords = totalRecords,
                iTotalDisplayRecords = totalRecords
            };

            var users = (from x in page
                         select new UserModel
                         {
                             Id = x.Id,
                             Name = x.Name,
                             Email = x.Email
                         }).ToList();

            foreach (var user in users)
            {
                var item = new Dictionary<string, string>
                    {
                        {"Name", user.Name},
                        {"Email", user.Email},
                        {"DT_RowId", "userItem_" + user.Id}
                    };

                model.aaData.Add(item);
            }

            return Json(model, JsonRequestBehavior.AllowGet);

        }

        public ActionResult SearchUsers(string searchTerm)
        {
            var model = (from u in Context.Users
                         where u.Name.Contains(searchTerm) && !u.Deleted
                         select new TypeaheadDatum
                         {
                             value = u.Id,
                             name = u.Name
                         }).ToList();

            return Json(model, JsonRequestBehavior.AllowGet);
        }

        public ActionResult UserRoles(long userId)
        {
            User user;
            if (Context.Users.TryGetById(userId, out user) && !user.Deleted)
            {
                var availableRoles = Context.Roles.AsEnumerable()
                                                  .Except(user.Roles, new EntityComparer())
                                                  .ToList();

                var model = new UserRolesModel
                {
                    UserId = user.Id,
                    UserName = user.Name,
                    Roles = new MultiSelectList(user.Roles, "Id", "Name"),
                    AvailableRoles = new MultiSelectList(availableRoles, "Id", "Name")
                };

                return View(model);
            }

            return this.RedirectToAction<UserController>(x => x.Index());
        }

        [HttpPost]
        public ActionResult UpdateUserRoles(long userId, IEnumerable<long> roleIds)
        {
            if (roleIds == null)
            {
                roleIds = new List<long>();
            }

            User user;
            if (!Context.Users.TryGetById(userId, out user))
                throw new InvalidOperationException(string.Format("user with id {0} was not found", userId));

            var roles = Context.Roles.FilterByIds(roleIds).ToList();
            user.Roles.Clear();

            foreach (var role in roles)
            {
                user.Roles.Add(role);
            }

            Context.SaveChanges();

            return JsonSuccess(Url.Action("Index", "User"));
        }

        public ActionResult EditUser(long userId)
        {
            User user;
            if (!Context.Users.TryGetById(userId, out user))
                throw new InvalidOperationException(string.Format("user with id {0} was not found", userId));

            var model = new UserModel
            {
                Id = user.Id,
                Name = user.Name
            };

            return PartialView("_EditUser", model);
        }

        [HttpPost]
        public ActionResult EditUser(UserModel model)
        {
            if (ModelState.IsValid)
            {
                User user;
                if (!Context.Users.TryGetById(model.Id, out user))
                    throw new InvalidOperationException(string.Format("user with id {0} was not found", model.Id));

                user.Name = model.Name;
                Context.SaveChanges();
            }

            return JsonView(ModelState.IsValid, "_EditUser", model);
        }

        public ActionResult Delete(long id)
        {
            User user;
            if (!Context.Users.TryGetById(id, out user))
                throw new InvalidOperationException("The User you are trying to delete does not exist.");

            var resourceManager = new ResourceManager(typeof(Localized));
            var message = resourceManager.GetString("AreYouSureYouWantToDelete");

            var model = new DeleteModel
            {
                Ids = new[] { id },
                Message = string.Format("{0} {1}?", message, user.Name),
                Controller = "User"
            };
            return PartialView("_DeleteModal", model);
        }

        [HttpPost]
        [SetResponseStatus]
        public ActionResult Delete(long[] ids)
        {
            if (ids.Contains(WebSecurity.CurrentUserId))
            {
                AddModelError(string.Empty, "CannotDeleteYourOwnUser");
            }

            var idsToDelete = ids.Where(x => x != WebSecurity.CurrentUserId).ToArray();

            Context.DeleteUsers(idsToDelete);
            Context.SaveChanges();

            if (Context.Errors.Any())
            {
                AddModelErrors(Context.Errors);
            }

            var model = new DeleteModel { Ids = ids, Message = string.Empty, Controller = "User" };
            return JsonView(ModelState.IsValid && !Context.Errors.Any(), "_DeleteModal", model);
        }
    }
}